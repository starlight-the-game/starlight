{"version":3,"file":"static/js/8096.d443cde1.chunk.js","mappings":"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","sources":["game/scenes/MainScene.ts","game/scenes/DataLoader.ts","game/scenes/AssetLoader.ts","game/GameApp.tsx"],"sourcesContent":["import Phaser from \"phaser\";\r\nimport Image = Phaser.GameObjects.Image;\r\n\r\n// game assets\r\n\r\nclass MainScene extends Phaser.Scene {\r\n    private notes!: Phaser.Physics.Arcade.Group;\r\n    private noteSpeed: number = 100;\r\n    private noteScale: number = 15;\r\n    private timingLine!: Phaser.GameObjects.Rectangle;\r\n    private gameData!: any;\r\n\r\n    // note positions\r\n    // 1920 / 10 = 192 per parts\r\n    // layout = 3 parts - 4 parts (we will use this one) - 3 parts\r\n    // 192 * 4 = 768 -> accounting for figma gaps -> 680\r\n    // then +184 each\r\n    private notePositionBase = 680;\r\n    private notePositionGaps = 184;\r\n    private noteOuter1PositionX = this.notePositionBase;\r\n    private noteInner1PositionX = this.notePositionBase + this.notePositionGaps;\r\n    private noteInner2PositionX = this.notePositionBase + this.notePositionGaps * 2;\r\n    private noteOuter2PositionX = this.notePositionBase + this.notePositionGaps * 3;\r\n\r\n    // gameplay elements\r\n    private scoreText!: Phaser.GameObjects.Text;\r\n    private comboText!: Phaser.GameObjects.Text;\r\n    private accuracyText!: Phaser.GameObjects.Text;\r\n\r\n    private combo!: number;\r\n    private score!: number;\r\n\r\n    constructor() {\r\n        super(\"MainScene\");\r\n    }\r\n\r\n    init(data: any) {\r\n        this.combo = 0;\r\n        this.score = 0;\r\n\r\n        // Propagate game data\r\n        this.gameData = data.gameData;\r\n\r\n        // Set up input handling\r\n        this.input.keyboard!.on(\"keydown\", this.handleInput, this);\r\n\r\n        // Initialize the notes group\r\n        this.notes = this.physics.add.group();\r\n\r\n        // Create the timing line (for event handling)\r\n        this.timingLine = this.add.rectangle(138 * 2 + this.noteOuter1PositionX, 845, 650, 10, 0xff0000, 0.5);\r\n    }\r\n\r\n    preload() {\r\n        // Set background image\r\n        const bgImage = this.add.image(0, 0, \"background\");\r\n        bgImage.setOrigin(0, 0);\r\n\r\n        // Dim the background a little bit\r\n        const darkScreen = this.add.rectangle(0, 0, 1920, 1080, 0x000000, 0.7);\r\n        darkScreen.setOrigin(0, 0);\r\n\r\n        // Create the timing ring (the real visual)\r\n        this.add.image(this.noteOuter1PositionX, 845, \"noteRing\");\r\n        this.add.image(this.noteInner1PositionX, 845, \"noteRing\");\r\n        this.add.image(this.noteInner2PositionX, 845, \"noteRing\");\r\n        this.add.image(this.noteOuter2PositionX, 845, \"noteRing\");\r\n\r\n        // Setup texts\r\n        this.scoreText = this.add.text(1410, 100, \"0000000\", {\r\n            fontFamily: \"sans-serif\",\r\n            color: \"#ffffff\",\r\n            fontSize: \"80px\"\r\n        }).setOrigin(0, 0);\r\n\r\n        this.comboText = this.add.text(200, 900, \"100x\", {\r\n            fontFamily: \"sans-serif\",\r\n            color: \"#ffffff\",\r\n            fontSize: \"60px\"\r\n        }).setOrigin(0, 0);\r\n\r\n        this.accuracyText = this.add.text(1480, 180, \"100.00%\", {\r\n            fontFamily: \"sans-serif\",\r\n            color: \"#ffffff\",\r\n            fontSize: \"60px\"\r\n        }).setOrigin(0, 0);\r\n\r\n        const notes = this.gameData.notes;\r\n\r\n        notes.forEach((note: any) => {\r\n            const screenHeight = 845;\r\n            const timeToScroll = (screenHeight / (this.noteSpeed * this.noteScale)) * 1000;\r\n            const spawnTime = Math.max(0, note.time - timeToScroll);\r\n\r\n            // Use Phaser's delayedCall to schedule note creation\r\n            this.time.delayedCall(spawnTime, () => {\r\n                this.spawnNote(note.position); // Pass the lane or note properties for positioning\r\n                // console.log(`Adding note to pos ${note.position} at ${spawnTime}`);\r\n            });\r\n        });\r\n    }\r\n\r\n    create() {\r\n        let bgMusic = this.sound.add(\"music\");\r\n        bgMusic.play();\r\n    }\r\n\r\n    private spawnNote(position: integer) {\r\n        const xPositions = [\r\n            -1, // intentionally left\r\n            this.noteOuter1PositionX,\r\n            this.noteInner1PositionX,\r\n            this.noteInner2PositionX,\r\n            this.noteOuter2PositionX\r\n        ];\r\n\r\n        const noteObject = this.add.image(xPositions[position], 0, \"noteOuter\");\r\n        this.notes.add(noteObject);\r\n        this.notes.setVelocityY(this.noteSpeed * this.noteScale);\r\n    }\r\n\r\n    private handleInput(event: KeyboardEvent) {\r\n        // if (event.key === \"ArrowDown\") {\r\n            // Check for notes near the timing line\r\n            this.notes.getChildren().forEach((note) => {\r\n                const noteY = (note as Phaser.Physics.Arcade.Image).y;\r\n                if (Math.abs(noteY - 845) < 100) {\r\n                    (note as Phaser.Physics.Arcade.Image).destroy();\r\n                    // Trigger score increment here (communicate with React if needed)\r\n                    // console.log(\"Hit!\");\r\n                    ++this.combo;\r\n                    this.score += 300;\r\n                }\r\n            });\r\n        // }\r\n    }\r\n\r\n    private handleGameOver() {\r\n        // Redirect to history page\r\n        window.location.href = '/historypage';\r\n    }\r\n\r\n    update() {\r\n        this.comboText.setText(`${this.combo}x`);\r\n        this.scoreText.setText(`${this.score}`.padStart(7, \"0\"));\r\n        if (this.isGameOver()) {\r\n            this.handleGameOver();\r\n        }\r\n    }\r\n\r\n    // Add a method to check if the game is over\r\n    private isGameOver(): boolean {\r\n        // Implement your game over logic here\r\n        return false; // Placeholder\r\n    }\r\n}\r\n\r\nexport default MainScene;","import Phaser from \"phaser\";\r\n\r\n/**\r\n *  Class used for loading all the meta stuffs into the game.\r\n */\r\nclass DataLoader extends Phaser.Scene {\r\n    private mapId: number = 2211127;\r\n\r\n    constructor() {\r\n        super(\"DataLoader\");\r\n    }\r\n\r\n    init(data: any) {\r\n        this.mapId = data.songId; // Use songId from data\r\n    }\r\n\r\n    preload() {\r\n        const jsonUrl = `https://cluster1.swyrin.id.vn/static/${this.mapId}/${this.mapId}.json`;\r\n\r\n        this.load.json(\"gameData\", jsonUrl);\r\n    }\r\n\r\n    create() {\r\n        this.scene.switch(\"AssetLoader\", { mapId: this.mapId });\r\n    }\r\n}\r\n\r\nexport default DataLoader;","import Phaser from \"phaser\";\r\n\r\n/**\r\n *  Class used for loading all the asset stuffs into the game.\r\n */\r\nclass AssetLoader extends Phaser.Scene {\r\n    private mapId!: number;\r\n    private gameData!: any;\r\n\r\n    constructor() {\r\n        super(\"AssetLoader\");\r\n    }\r\n\r\n    init(data: any) {\r\n        this.mapId = data[\"mapId\"];\r\n    }\r\n\r\n    preload() {\r\n        this.gameData = this.cache.json.get(\"gameData\");\r\n\r\n        const audioName = this.gameData.metadata.audio_file;\r\n        const imageName = this.gameData.metadata.background_file;\r\n\r\n        const imageUrl = `https://cluster1.swyrin.id.vn/static/${this.mapId}/${imageName}`;\r\n        const audioFile = `https://cluster1.swyrin.id.vn/static/${this.mapId}/${audioName}`;\r\n\r\n        this.load.image(\"noteOuter\", require(\"../assets/star_note_outer.png\"));\r\n        this.load.image(\"noteRing\", require(\"../assets/ring.png\"));\r\n        this.load.image(\"background\", imageUrl);\r\n        this.load.audio(\"music\", audioFile);\r\n    }\r\n\r\n    create() {\r\n        this.scene.switch(\"MainScene\", { gameData: this.gameData });\r\n    }\r\n}\r\n\r\nexport default AssetLoader;","import Phaser from \"phaser\";\r\nimport { useRef, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport MainScene from \"./scenes/MainScene.ts\";\r\nimport DataLoader from \"./scenes/DataLoader.ts\";\r\nimport AssetLoader from \"./scenes/AssetLoader.ts\";\r\n\r\nfunction GameApp() {\r\n    const gameRef = useRef(null);\r\n    const { songId } = useParams(); // Get songId from route params\r\n\r\n    useEffect(() => {\r\n        const config: Phaser.Types.Core.GameConfig = {\r\n            type: Phaser.AUTO,\r\n            parent: gameRef.current,\r\n            width: 1920,\r\n            height: 1080,\r\n            scene: [\r\n                DataLoader,\r\n                AssetLoader,\r\n                MainScene,\r\n            ],\r\n            powerPreference: \"high-performance\",\r\n            fps: {\r\n                smoothStep: true,\r\n                target: 120,\r\n                forceSetTimeOut: true\r\n            },\r\n            physics: {\r\n                default: \"arcade\",\r\n                arcade: {\r\n                    debug: false,\r\n                },\r\n            },\r\n        };\r\n\r\n        const game = new Phaser.Game(config);\r\n        game.scene.start('DataLoader', { songId }); // Pass songId to DataLoader scene\r\n\r\n        return () => {\r\n            game.destroy(true);\r\n        };\r\n    }, [songId]);\r\n\r\n    return (\r\n        <div\r\n            ref={gameRef}\r\n            style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100vh\" }}\r\n        >\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameApp;"],"names":["Phaser","Image","MainScene","constructor","super","notes","noteSpeed","noteScale","timingLine","gameData","notePositionBase","notePositionGaps","noteOuter1PositionX","this","noteInner1PositionX","noteInner2PositionX","noteOuter2PositionX","scoreText","comboText","accuracyText","combo","score","init","data","input","keyboard","on","handleInput","physics","add","group","rectangle","preload","image","setOrigin","text","fontFamily","color","fontSize","forEach","note","timeToScroll","spawnTime","Math","max","time","delayedCall","spawnNote","position","create","sound","play","xPositions","noteObject","setVelocityY","event","getChildren","noteY","y","abs","destroy","handleGameOver","window","location","href","update","setText","padStart","isGameOver","DataLoader","mapId","songId","jsonUrl","load","json","scene","switch","AssetLoader","cache","get","audioName","metadata","audio_file","imageName","background_file","imageUrl","audioFile","require","audio","gameRef","useRef","useParams","useEffect","config","type","parent","current","width","height","powerPreference","fps","smoothStep","target","forceSetTimeOut","default","arcade","debug","game","start","_jsx","ref","style","display","justifyContent","alignItems"],"sourceRoot":""}