{"version":3,"file":"static/js/283.dfb691ae.chunk.js","mappings":"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","sources":["game/scenes/MainScene.js","game/scenes/DataLoader.js","game/scenes/AssetLoader.js","game/scenes/GameFinalizer.js","game/GameApp.jsx"],"sourcesContent":["import Phaser from \"phaser\";\n\n/*\n *  The game.\n */\nclass MainScene extends Phaser.Scene {\n    // note groups\n    notes;\n    rawNoteList;\n\n    // gameplay properties\n    noteSpeed = 100;\n    noteScale = 15;\n    gameData;\n\n    // note positions\n    notePositionBase = 680;\n    notePositionGaps = 184;\n    noteOuter1PositionX = this.notePositionBase;\n    noteInner1PositionX = this.notePositionBase + this.notePositionGaps;\n    noteInner2PositionX = this.notePositionBase + this.notePositionGaps * 2;\n    noteOuter2PositionX = this.notePositionBase + this.notePositionGaps * 3;\n\n    // gameplay elements\n    judgementPrintX = 1500;\n    judgementPrintY = 500;\n    errorPrintX = 1500;\n    errorPrintY = 600;\n    gameStartTime;\n    scoreText;\n    comboText;\n    accuracyText;\n    judgementText;\n    errorText;\n\n    // buttons\n    noteOuter1Key;\n    noteInner1Key;\n    noteInner2Key;\n    noteOuter2Key;\n\n    // random\n    combo;\n    score;\n    accuracy;\n\n    // stuffs\n    totalNotes;\n    totalCrit;\n    totalPerf;\n    totalGood;\n    totalBad;\n    totalMiss;\n    inGameTimeInMs;\n\n    // keybind locking\n    key1locked;\n    key2locked;\n    key3locked;\n    key4locked;\n\n    constructor() {\n        super(\"MainScene\");\n    }\n\n    init(data) {\n        this.combo = 0;\n        this.score = 0;\n        this.totalCrit = 0;\n        this.totalPerf = 0;\n        this.totalGood = 0;\n        this.totalBad = 0;\n        this.totalMiss = 0;\n        this.inGameTimeInMs = 0;\n        this.accuracy = 100;\n        this.gameData = data.gameData;\n        this.rawNoteList = this.gameData.notes;\n        this.gameStartTime = new Date(Date.now());\n\n        // input\n        this.noteOuter1Key = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n        this.noteInner1Key = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n        this.noteInner2Key = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SEMICOLON);\n        this.noteOuter2Key = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.QUOTES);\n\n        // input lock\n        this.key1locked = false;\n        this.key2locked = false;\n        this.key3locked = false;\n        this.key4locked = false;\n\n        // notes\n        this.notes = this.physics.add.group();\n\n        // pause the game to wait for music\n        this.scene.pause();\n    }\n\n    preload() {\n        // Set background image\n        const bgImage = this.add.image(0, 0, \"background\");\n        bgImage.setOrigin(0, 0);\n\n        // Dim the background a little bit\n        const darkScreen = this.add.rectangle(0, 0, 1920, 1080, 0x000000, 0.7);\n        darkScreen.setOrigin(0, 0);\n\n        // Create the timing ring (the real visual)\n        this.add.image(this.noteOuter1PositionX, 845, \"noteRing\");\n        this.add.image(this.noteInner1PositionX, 845, \"noteRing\");\n        this.add.image(this.noteInner2PositionX, 845, \"noteRing\");\n        this.add.image(this.noteOuter2PositionX, 845, \"noteRing\");\n\n        // Setup texts\n        this.scoreText = this.add.text(1410, 100, \"0000000\", {\n            fontFamily: \"sans-serif\",\n            color: \"#ffffff\",\n            fontSize: \"80px\"\n        }).setOrigin(0, 0);\n\n        this.comboText = this.add.text(200, 900, \"0x\", {\n            fontFamily: \"sans-serif\",\n            color: \"#ffffff\",\n            fontSize: \"60px\"\n        }).setOrigin(0, 0);\n\n        this.accuracyText = this.add.text(1480, 180, \"100.00%\", {\n            fontFamily: \"sans-serif\",\n            color: \"#ffffff\",\n            fontSize: \"60px\"\n        }).setOrigin(0, 0);\n\n        this.judgementText = this.add.text(this.judgementPrintX, this.judgementPrintY, \".\", {\n            fontFamily: \"sans-serif\",\n            color: \"#ffffff\",\n            fontSize: \"60px\"\n        }).setOrigin(0, 0);\n\n        this.errorText = this.add.text(this.errorPrintX, this.errorPrintY, \".\", {\n            fontFamily: \"sans-serif\",\n            color: \"#ffffff\",\n            fontSize: \"60px\"\n        }).setOrigin(0, 0);\n\n        this.totalNotes = this.rawNoteList.length;\n\n        this.rawNoteList.forEach((note) => {\n            const screenHeight = 845;\n            const timeToScroll = (screenHeight / (this.noteSpeed * this.noteScale)) * 1000;\n            const spawnTime = Math.max(0, note.time - timeToScroll);\n\n            this.time.delayedCall(spawnTime, () => { this.spawnNote(note); });\n        });\n    }\n\n    create() {\n        let bgMusic = this.sound.add(\"music\");\n        this.scene.resume();\n        this.gameStartTime = new Date(Date.now());\n        bgMusic.play();\n    }\n\n    spawnNote(note) {\n        // I sleep\n        let pos = note.position -= 1;\n\n        const xPositions = [\n            this.noteOuter1PositionX,\n            this.noteInner1PositionX,\n            this.noteInner2PositionX,\n            this.noteOuter2PositionX\n        ];\n\n        const noteSelection = [\n            \"noteOuter\",\n            \"noteInner\",\n            \"noteInner\",\n            \"noteOuter\",\n        ]\n\n        const noteObject = this.add.image(xPositions[pos], 0, noteSelection[pos]);\n\n        noteObject.setData(\"time\", note.time);\n        noteObject.setData(\"position\", pos);\n        noteObject.setData(\"type\", note.type);\n\n        this.notes.add(noteObject);\n        this.notes.setVelocityY(this.noteSpeed * this.noteScale);\n    }\n\n    /*\n        Make judgement texts (right-hand side) disappears after 200ms.\n     */\n    makeJudgementTextDisappear() {\n        this.time.delayedCall(200, () => {\n            this.judgementText.setText(\"\");\n            this.errorText.setText(\"\");\n        }, [], this);\n    }\n\n    handleInput(keyPosition) {\n        const now = this.inGameTimeInMs;\n\n        // I sleep again.\n        keyPosition -= 1;\n\n        const xPositions = [\n            this.noteOuter1PositionX,\n            this.noteInner1PositionX,\n            this.noteInner2PositionX,\n            this.noteOuter2PositionX\n        ];\n\n        const noteList = this.notes.getChildren();\n\n        // filter notes that are in the needed lane\n        // and near the judgement box\n        let notesAtWantedLanes = noteList\n            .filter(note => note.x === xPositions[keyPosition])\n            .filter(note => Math.abs(note.y - 845) <= 150);\n\n        if (notesAtWantedLanes.length === 0) return;\n\n        // get notes that lies the furthest,\n        // but not exceeding the \"judgement bound\".\n        const theChosenOne = notesAtWantedLanes\n            .reduce((previousValue, currentValue) => {\n                const judgePoint = 845;\n                const judgeRange = 100;\n\n                const upperPoint = judgePoint - judgeRange\n                const chokePoint = judgePoint + judgeRange;\n\n                const currentNoteObj = currentValue;\n                const lastNoteObj = previousValue;\n\n                const acceptedNote =\n                    (upperPoint <= currentNoteObj.y && currentNoteObj.y <= chokePoint) && (currentNoteObj.y < lastNoteObj.y)\n                        ? currentValue\n                        : previousValue;\n\n                return acceptedNote;\n            });\n\n        // welp, no note I guess?\n        if (theChosenOne === null) return;\n\n        const noteObj = theChosenOne;\n\n        const hitTime = now;\n        const expectedTime = noteObj.getData(\"time\");\n\n        noteObj.destroy();\n        ++this.combo;\n\n        const phaserError = 30;\n        const offset = Math.abs(hitTime - expectedTime - phaserError);\n        const isEarly = hitTime < expectedTime;\n        const isLate = hitTime > expectedTime;\n\n        console.log(`Current time: ${now}, Hit time: ${hitTime}, Expected: ${expectedTime}`);\n        console.log(offset);\n\n        let errTxt = isEarly ? \"EARLY\" : isLate ? \"LATE\" : \"Nice!\";\n        let shouldLockKey = false;\n\n        let critWindow = 40,\n            perfWindow = 80,\n            goodWindow = 120,\n            badWindow = 180;\n\n        if (offset <= critWindow) {\n            ++this.totalCrit;\n            this.judgementText.setText(\"Nice!\");\n            this.errorText.setText(\"\");\n            shouldLockKey = true;\n            this.makeJudgementTextDisappear();\n        }\n        else if (critWindow < offset && offset <= perfWindow) {\n            ++this.totalPerf;\n            this.judgementText.setText(\"Perfect\");\n            this.errorText.setText(errTxt);\n            shouldLockKey = true;\n            this.makeJudgementTextDisappear();\n        }\n        else if (perfWindow < offset && offset <= goodWindow) {\n            ++this.totalGood;\n            this.judgementText.setText(\"Fine\");\n            this.errorText.setText(errTxt);\n            shouldLockKey = true;\n            this.makeJudgementTextDisappear();\n        }\n        else if (goodWindow < offset && offset <= badWindow) {\n            ++this.totalBad;\n            this.judgementText.setText(\"Meh.\");\n            this.errorText.setText(errTxt);\n            shouldLockKey = true;\n            this.makeJudgementTextDisappear();\n        }\n\n        // lock the key\n        switch (keyPosition) {\n            case 0:\n                this.key1locked = shouldLockKey;\n                break;\n            case 1:\n                this.key2locked = shouldLockKey;\n                break;\n            case 2:\n                this.key3locked = shouldLockKey;\n                break;\n            case 3:\n                this.key4locked = shouldLockKey;\n                break;\n            default:\n                break;\n        }\n    }\n\n    /*\n        Highlights the key being pressed.\n     */\n    drawInputIndicator(keyPosition) {\n        // I sleep again.\n        keyPosition -= 1;\n\n        const xPositions = [\n            this.noteOuter1PositionX,\n            this.noteInner1PositionX,\n            this.noteInner2PositionX,\n            this.noteOuter2PositionX\n        ];\n\n        let indicator = this.add.image(xPositions[keyPosition], 845, \"indicator\");\n\n        setTimeout((x) => { x.destroy(); }, 20, indicator);\n    }\n\n    update(time, delta) {\n        this.inGameTimeInMs += delta;\n\n        if (this.noteOuter1Key.isDown) {\n            if (!this.key1locked) this.handleInput(1);\n            this.drawInputIndicator(1);\n        } else {\n            this.key1locked = false;\n        }\n\n        if (this.noteInner1Key.isDown) {\n            if (!this.key2locked) this.handleInput(2);\n            this.drawInputIndicator(2);\n        } else {\n            this.key2locked = false;\n        }\n\n        if (this.noteInner2Key.isDown) {\n            if (!this.key3locked) this.handleInput(3);\n            this.drawInputIndicator(3);\n        } else {\n            this.key3locked = false;\n        }\n\n        if (this.noteOuter2Key.isDown) {\n            if (!this.key4locked) this.handleInput(4);\n            this.drawInputIndicator(4);\n        } else {\n            this.key4locked = false;\n        }\n\n        // noinspection PointlessArithmeticExpressionJS\n        this.accuracy = (\n                350 * (this.totalNotes - this.totalGood - this.totalBad - this.totalMiss) +\n                // 300 * this.totalPerf +\n                200 * this.totalGood +\n                 50 * this.totalBad  +\n                  0 * this.totalMiss\n            ) / (350.00 * this.totalNotes) * 100.0;\n\n        // handle MISS judgement\n        this.notes.getChildren().forEach((note) => {\n            const noteObj = note;\n            const noteY = noteObj.y;\n\n            if (noteY > 845 + 200) {\n                noteObj.destroy();\n                this.combo = 0;\n                ++this.totalMiss;\n                this.judgementText.setText(\"Missed.\");\n                this.errorText.setText(\"\");\n                this.makeJudgementTextDisappear();\n            }\n        });\n\n        this.comboText.setText(`${this.combo}x`);\n        this.scoreText.setText(`${this.score}`.padStart(7, \"0\"));\n        this.accuracyText.setText(`${this.accuracy.toFixed(2)}%`.padStart(7, \" \"));\n    }\n}\n\nexport default MainScene;\n","import Phaser from \"phaser\";\n\n/**\n *  Class used for loading all the meta stuffs into the game.\n */\nclass DataLoader extends Phaser.Scene {\n    mapId;\n\n    constructor() {\n        super(\"DataLoader\");\n    }\n\n    init(data) {\n        this.mapId = data[\"song\"];\n    }\n\n    preload() {\n        const jsonUrl = `https://cluster1.swyrin.id.vn/static/${this.mapId}/${this.mapId}.json`;\n\n        this.load.json(\"gameData\", jsonUrl);\n    }\n\n    create() {\n        this.scene.switch(\"AssetLoader\", { mapId: this.mapId });\n    }\n}\n\nexport default DataLoader;","import Phaser from \"phaser\";\n\n/**\n *  Class used for loading all the asset stuffs into the game.\n */\nclass AssetLoader extends Phaser.Scene {\n    mapId;\n    gameData;\n\n    constructor() {\n        super(\"AssetLoader\");\n    }\n\n    init(data) {\n        this.mapId = data[\"mapId\"];\n    }\n\n    preload() {\n        this.gameData = this.cache.json.get(\"gameData\");\n\n        const audioName = this.gameData[\"metadata\"][\"audio_file\"];\n        const imageName = this.gameData[\"metadata\"][\"background_file\"];\n\n        const imageUrl = `https://cluster1.swyrin.id.vn/static/${this.mapId}/${imageName}`;\n        const audioFile = `https://cluster1.swyrin.id.vn/static/${this.mapId}/${audioName}`;\n\n        this.load.image(\"noteOuter\", require(\"../assets/star_note_outer.png\"));\n        this.load.image(\"noteInner\", require(\"../assets/star_note_inner.png\"));\n        this.load.image(\"noteRing\", require(\"../assets/ring.png\"));\n        this.load.image(\"indicator\", require(\"../assets/indicator.png\"));\n        this.load.image(\"background\", imageUrl);\n        this.load.audio(\"music\", audioFile);\n    }\n\n    create() {\n        this.scene.switch(\"MainScene\", { gameData: this.gameData });\n    }\n}\n\nexport default AssetLoader;","import Phaser from \"phaser\";\n\nclass GameFinalizer extends Phaser.Scene {\n    constructor() {\n        super(\"GameFinalizer\");\n    }\n}\n\nexport default GameFinalizer;","import Phaser from \"phaser\";\nimport { useRef, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport MainScene from \"./scenes/MainScene\";\nimport DataLoader from \"./scenes/DataLoader\";\nimport AssetLoader from \"./scenes/AssetLoader\";\nimport GameFinalizer from \"./scenes/GameFinalizer\";\n\nfunction GameApp() {\n    const gameRef = useRef(null);\n    const location = useLocation();\n    const { songId } = location.state || { songId: 2212131 };\n\n    useEffect(() => {\n        const config = {\n            type: Phaser.AUTO,\n            parent: gameRef.current,\n            width: 1920,\n            height: 1080,\n            powerPreference: \"high-performance\",\n            fps: {\n                smoothStep: true,\n                target: 120,\n                min: 60,\n                limit: 360\n            },\n            physics: {\n                default: \"arcade\",\n                arcade: {\n                    debug: false,\n                },\n            }\n        };\n\n        const game = new Phaser.Game(config);\n\n        game.scene.add(\"DataLoader\", DataLoader, true, { song: songId });\n        game.scene.add(\"AssetLoader\", AssetLoader);\n        game.scene.add(\"MainScene\", MainScene);\n        game.scene.add(\"GameFinalizer\", GameFinalizer);\n\n        return () => {\n            game.destroy(true);\n        };\n    }, [songId]);\n\n    return (\n        <div\n            ref={gameRef}\n            style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100vh\" }}\n        >\n        </div>\n    );\n}\n\nexport default GameApp;"],"names":["MainScene","Phaser","constructor","super","noteSpeed","noteScale","notePositionBase","notePositionGaps","noteOuter1PositionX","this","noteInner1PositionX","noteInner2PositionX","noteOuter2PositionX","judgementPrintX","judgementPrintY","errorPrintX","errorPrintY","init","data","combo","score","totalCrit","totalPerf","totalGood","totalBad","totalMiss","inGameTimeInMs","accuracy","gameData","rawNoteList","notes","gameStartTime","Date","now","noteOuter1Key","input","keyboard","addKey","Keyboard","KeyCodes","A","noteInner1Key","S","noteInner2Key","SEMICOLON","noteOuter2Key","QUOTES","key1locked","key2locked","key3locked","key4locked","physics","add","group","scene","pause","preload","image","setOrigin","rectangle","scoreText","text","fontFamily","color","fontSize","comboText","accuracyText","judgementText","errorText","totalNotes","length","forEach","note","timeToScroll","spawnTime","Math","max","time","delayedCall","spawnNote","create","bgMusic","sound","resume","play","pos","position","xPositions","noteObject","setData","type","setVelocityY","makeJudgementTextDisappear","setText","handleInput","keyPosition","notesAtWantedLanes","getChildren","filter","x","abs","y","theChosenOne","reduce","previousValue","currentValue","currentNoteObj","lastNoteObj","judgePoint","noteObj","hitTime","expectedTime","getData","destroy","offset","isEarly","isLate","console","log","errTxt","shouldLockKey","drawInputIndicator","indicator","setTimeout","update","delta","isDown","padStart","toFixed","DataLoader","mapId","jsonUrl","load","json","switch","AssetLoader","cache","get","audioName","imageName","imageUrl","audioFile","require","audio","GameFinalizer","gameRef","useRef","location","useLocation","songId","state","useEffect","config","parent","current","width","height","powerPreference","fps","smoothStep","target","min","limit","default","arcade","debug","game","song","_jsx","ref","style","display","justifyContent","alignItems"],"sourceRoot":""}